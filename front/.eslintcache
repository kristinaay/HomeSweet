[{"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\reportWebVitals.js":"1","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\App.js":"2","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\home.js":"3","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\index.js":"4","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\signup.js":"5","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\signin.js":"6","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\housing.js":"7","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\appts.js":"8","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\account.js":"9"},{"size":362,"mtime":1606939464318,"results":"10","hashOfConfig":"11"},{"size":879,"mtime":1607378346241,"results":"12","hashOfConfig":"11"},{"size":1753,"mtime":1607214618812,"results":"13","hashOfConfig":"11"},{"size":500,"mtime":1606939464318,"results":"14","hashOfConfig":"11"},{"size":3444,"mtime":1607229474558,"results":"15","hashOfConfig":"11"},{"size":3026,"mtime":1607229483237,"results":"16","hashOfConfig":"11"},{"size":12876,"mtime":1607394229078,"results":"17","hashOfConfig":"11"},{"size":6609,"mtime":1607480477493,"results":"18","hashOfConfig":"11"},{"size":6733,"mtime":1607382429564,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"h2owr1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\reportWebVitals.js",[],["41","42"],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\App.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\home.js",["43"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../styles/home.css\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nfunction Home() {\r\n  let textInput = React.createRef();\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => {\r\n    const newSearch = textInput.current.value;\r\n\r\n    history.push({\r\n      pathname: \"/housing\",\r\n      state: { textInput: newSearch },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-end\"\r\n        role=\"navigation\"\r\n      >\r\n        <Link to=\"/\" className=\"logo-container\">\r\n          <h1 className=\"logo-header\">HOMESWEET</h1>\r\n        </Link>\r\n        <Link to=\"/signin\" className=\"nav-links\">\r\n          Sign In\r\n        </Link>\r\n        <Link to=\"/signup\" className=\"nav-links\">\r\n          Sign Up\r\n        </Link>\r\n      </div>\r\n      <section id=\"section1\">\r\n        <h2 className=\"discover\">Rediscover Home</h2>\r\n        <div className=\"subtitle\">Find your perfect San Francisco housing.</div>\r\n        <div className=\"search-container\">\r\n          <div className=\"search\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"searchTerm\"\r\n              ref={textInput}\r\n              placeholder=\"Search by neighborhood...\"\r\n            />\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"searchButton\"\r\n              onClick={handleClick}\r\n            >\r\n              <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <footer>Image by @bradencollum on Unsplash.</footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\index.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\signup.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\signin.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\housing.js",["44"],"import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../styles/housing.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { ButtonGroup, DropdownButton } from \"react-bootstrap\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction Housing(props) {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const username = urlParams.get(\"username\");\r\n  if (username !== null && username !== undefined) {\r\n    localStorage.setItem(\"username\", username);\r\n  }\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(12);\r\n  const [hovered, setHovered] = useState([]);\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [origPosts, setOrigPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [p, setP] = useState([null, [null]]);\r\n  const location = useLocation();\r\n\r\n  let textInput = React.createRef();\r\n  let textInputProps =\r\n    location.state === undefined ? \"\" : location.state.textInput;\r\n\r\n  const handleClick = () => {\r\n    const newSearch = textInput.current.value;\r\n    setLoading(true);\r\n    setPosts(\r\n      origPosts.filter(\r\n        (p) => p[\"result-hood\"] && p[\"result-hood\"].includes(newSearch)\r\n      )\r\n    );\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getLoggedIn = async () => {\r\n      try {\r\n        const _loggedin = await fetch(\"/getlog\", {\r\n          method: \"GET\",\r\n          credentials: \"include\",\r\n        }).then((res) => res.json());\r\n        setLoggedIn(_loggedin);\r\n        console.log(\"logged in: \", _loggedin);\r\n      } catch (err) {\r\n        console.log(\"error\");\r\n      }\r\n    };\r\n    getLoggedIn();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getPosts = async () => {\r\n      try {\r\n        if (textInputProps !== null && textInputProps !== \"\") {\r\n          setLoading(true);\r\n          const _posts = await fetch(\"/getposts\").then((res) => res.json());\r\n          setOrigPosts(_posts);\r\n          setLoading(false);\r\n        } else {\r\n          setLoading(true);\r\n          const _posts = await fetch(\"/getposts\").then((res) => res.json());\r\n          setPosts(_posts);\r\n          setOrigPosts(_posts);\r\n          setLoading(false);\r\n        }\r\n      } catch (err) {\r\n        console.log(\"error\");\r\n      }\r\n    };\r\n    getPosts();\r\n  }, [textInputProps]);\r\n\r\n  useEffect(() => {\r\n    setPosts(\r\n      origPosts.filter(\r\n        (p) => p[\"result-hood\"] && p[\"result-hood\"].includes(textInputProps)\r\n      )\r\n    );\r\n  }, [textInputProps, origPosts]);\r\n\r\n  useEffect(() => {\r\n    const getHovered = () => {\r\n      try {\r\n        const arr = [];\r\n        for (let i = 0; i < 3010; i++) {\r\n          arr.push(false);\r\n        }\r\n        setHovered(arr);\r\n      } catch (err) {\r\n        console.log(\"error\", err);\r\n      }\r\n    };\r\n    getHovered();\r\n  }, []);\r\n\r\n  const changeHovered = (index, value) => {\r\n    let copyArr = [...hovered];\r\n    copyArr[index] = value;\r\n    setHovered(copyArr);\r\n  };\r\n\r\n  const getHov = (index) => {\r\n    return hovered[index];\r\n  };\r\n\r\n  const getModal = () => {\r\n    return showModal;\r\n  };\r\n\r\n  const indexLastPost = currentPage * postsPerPage;\r\n  const indexFirstPost = indexLastPost - postsPerPage;\r\n  const currPosts = posts.slice(indexFirstPost, indexLastPost);\r\n\r\n  const renderNav = (loggedIn) => {\r\n    if (!loggedIn) {\r\n      return (\r\n        <div\r\n          className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-end\"\r\n          role=\"navigation\"\r\n        >\r\n          <Link to=\"/\" className=\"logo-container\">\r\n            <h1 className=\"logo-header\">HOMESWEET</h1>\r\n          </Link>\r\n          <Link to=\"/signin\" className=\"nav-links\">\r\n            Sign In\r\n          </Link>\r\n          <Link to=\"/signup\" className=\"nav-links\">\r\n            Sign Up\r\n          </Link>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-end\"\r\n          role=\"navigation\"\r\n        >\r\n          <Link to=\"/\" className=\"logo-container\">\r\n            <h1 className=\"logo-header\">HOMESWEET</h1>\r\n          </Link>\r\n          <ButtonGroup className=\"dropdown-menu-1\">\r\n            <DropdownButton\r\n              id=\"dropdown-btn-menu\"\r\n              title=<i className=\"navbar-toggler-icon\" />\r\n            >\r\n              <Link to=\"/appointments\">\r\n                <Button key=\"1\" className=\"menu-btn\">\r\n                  My Appointments\r\n                </Button>\r\n              </Link>\r\n              <Link to=\"/account\">\r\n                <Button key=\"2\" className=\"menu-btn\">\r\n                  My Account\r\n                </Button>\r\n              </Link>\r\n              <form className=\"form\" action=\"/signout\" method=\"post\">\r\n                <Button key=\"3\" className=\"menu-btn\" type=\"submit\">\r\n                  Sign Out\r\n                </Button>\r\n              </form>\r\n            </DropdownButton>\r\n          </ButtonGroup>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const clickedInfo = (p) => {\r\n    setP(Object.values(p));\r\n    setShowModal(true);\r\n  };\r\n  const closeModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const renderImg = () => {\r\n    const items = [];\r\n    for (let i = 0; i < p[1].length; i++) {\r\n      items.push(\r\n        <div className=\"indiv-img col-xs-6\">\r\n          <img\r\n            src={\r\n              p[1]\r\n                ? `${`${p[1][i]}`.replace(\"50x50c\", \"600x450\")}`\r\n                : \"./images/notf.png\"\r\n            }\r\n            onError={(event) =>\r\n              event.target.setAttribute(\"src\", \"./images/notf.png\")\r\n            }\r\n            alt=\"housing\"\r\n            className=\"housing-img-2\"\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\" \"}\r\n        <div className=\"container-fluid\" id=\"cont\">\r\n          <div className=\"row\">{items}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderPosts = (posts, loading) => {\r\n    if (loading) {\r\n      return <h2>Loading...</h2>;\r\n    } else if (posts.length === 0) {\r\n      return <h2>No housing met your criteria.</h2>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal isOpen={showModal}>\r\n          <div className=\"modal-header\">\r\n            <button onClick={closeModal} className=\"close-btn\">\r\n              X\r\n            </button>\r\n            <h2 className=\"modal-header-2\">{p[3]}</h2>\r\n          </div>\r\n\r\n          <div className=\"modal-body\">\r\n            <div className=\"modal-img\"></div>\r\n            <div>\r\n              <b>Price:</b> {p[4]}\r\n            </div>\r\n            <div>\r\n              <b>Neighborhood:</b> {p[6]}\r\n            </div>\r\n            <div>\r\n              <b>Map Address:</b> {p[13]}\r\n            </div>\r\n            <div>\r\n              <b>Date posted:</b> {p[8]}\r\n            </div>\r\n            <div>\r\n              <b>Housing information:</b> {p[5]}\r\n            </div>\r\n            <div>\r\n              <b>About:</b>\r\n              {`${p[9]}`\r\n                .replaceAll(\"&amp;\", \"and\")\r\n                .replace(/<[^>]*>?/gm, \"\")\r\n                .replace(\"QR Code Link to This Post\", \"\")}\r\n            </div>{\" \"}\r\n          </div>\r\n\r\n          <div className=\"modal-img\">{renderImg()}</div>\r\n        </Modal>\r\n\r\n        <Container>\r\n          <Row>\r\n            {posts.map((p, index) => (\r\n              <Col md=\"4\">\r\n                <div className=\"container-card\">\r\n                  {\" \"}\r\n                  <h4 className=\"card-header-1\">{p[\"result-title\"]}</h4>\r\n                  {getHov(index) && (\r\n                    <div\r\n                      className=\"moreinfo\"\r\n                      onMouseLeave={() => changeHovered(index, false)}\r\n                      onMouseOver={() => changeHovered(index, true)}\r\n                    >\r\n                      <Button className=\"click\" onClick={() => clickedInfo(p)}>\r\n                        Click for more info!{\" \"}\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                  {!getHov(index) && (\r\n                    <div className=\"whole-card\">\r\n                      <div\r\n                        className=\"card-body\"\r\n                        id=\"card-body-1\"\r\n                        onMouseLeave={() => changeHovered(index, false)}\r\n                        onMouseOver={() => changeHovered(index, true)}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            p.images[0]\r\n                              ? `${p.images[0].replace(\"50x50c\", \"600x450\")}`\r\n                              : \"./images/notf.png\"\r\n                          }\r\n                          onError={(event) =>\r\n                            event.target.setAttribute(\r\n                              \"src\",\r\n                              \"./images/notf.png\"\r\n                            )\r\n                          }\r\n                          alt=\"housing\"\r\n                          className=\"housing-img\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const paginate = (pageNumber, totalPosts) => {\r\n    if (pageNumber === \"<<\") {\r\n      setCurrentPage(1);\r\n    } else if (pageNumber === \">>\") {\r\n      setCurrentPage(Math.ceil(totalPosts / 12));\r\n    } else {\r\n      setCurrentPage(pageNumber);\r\n    }\r\n  };\r\n\r\n  const Pagination = (postsPerPage, totalPosts, paginate, currentPage) => {\r\n    const pageNumbers = [];\r\n\r\n    const pages = Math.ceil(totalPosts / 12);\r\n    if (currentPage <= 5) {\r\n      currentPage = 5;\r\n    }\r\n\r\n    if (currentPage >= pages - 5) {\r\n      currentPage = pages - 5;\r\n    }\r\n    pageNumbers.push(\"<<\");\r\n\r\n    for (\r\n      let i = Math.max(1, currentPage - 5);\r\n      i <= Math.min(currentPage + 5, totalPosts);\r\n      i++\r\n    ) {\r\n      pageNumbers.push(i);\r\n    }\r\n    pageNumbers.push(\">>\");\r\n\r\n    return (\r\n      <nav className=\"pag\">\r\n        <ol className=\"pagination\">\r\n          {pageNumbers.map((i) => (\r\n            <li key={i} className=\"page-item\">\r\n              <Button\r\n                onClick={() => paginate(i, totalPosts)}\r\n                className=\"page-link\"\r\n              >\r\n                {i}\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </nav>\r\n    );\r\n  };\r\n\r\n  const filterLoToHi = () => {\r\n    const sorted = [...posts].sort(\r\n      (a, b) =>\r\n        a[\"result-price\"].replace(\"$\", \"\").replace(\",\", \"\") -\r\n        b[\"result-price\"].replace(\"$\", \"\").replace(\",\", \"\")\r\n    );\r\n\r\n    setPosts(sorted);\r\n  };\r\n\r\n  const filterHiToLo = () => {\r\n    const sorted = [...posts].sort(\r\n      (a, b) =>\r\n        b[\"result-price\"].replace(\"$\", \"\").replace(\",\", \"\") -\r\n        a[\"result-price\"].replace(\"$\", \"\").replace(\",\", \"\")\r\n    );\r\n\r\n    setPosts(sorted);\r\n  };\r\n\r\n  const filterOrig = () => {\r\n    setPosts(origPosts);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {renderNav(loggedIn)}\r\n\r\n      <div className=\"house-full\">\r\n        <div className=\"inner\">\r\n          <div className=\"filters\">\r\n            <div className=\"search\" id=\"search-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"searchTerm\"\r\n                ref={textInput}\r\n                placeholder=\"Search by neighborhood...\"\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                className=\"searchButton\"\r\n                onClick={handleClick}\r\n              >\r\n                <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n              </button>\r\n              <ButtonGroup className=\"dropdown\">\r\n                <DropdownButton title=\"Sort By:\" id=\"dropdown-btn\">\r\n                  <Button key=\"1\" className=\"filter-btn\" onClick={filterLoToHi}>\r\n                    Price (low to high)\r\n                  </Button>\r\n                  <Button key=\"2\" className=\"filter-btn\" onClick={filterHiToLo}>\r\n                    Price (high to low){\" \"}\r\n                  </Button>\r\n                  <Button key=\"3\" className=\"filter-btn\" onClick={filterOrig}>\r\n                    Default\r\n                  </Button>\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </div>\r\n          </div>\r\n          <div className=\"rendered\">{renderPosts(currPosts, loading)} </div>\r\n          {Pagination(postsPerPage, posts.length, paginate, currentPage)}\r\n        </div>\r\n      </div>\r\n\r\n      <footer className=\"other-footer\">\r\n        Image by @bradencollum on Unsplash.\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Housing;\r\n","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\appts.js",["45","46"],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\account.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":4,"column":10,"nodeType":"53","messageId":"54","endLine":4,"endColumn":18},{"ruleId":"51","severity":1,"message":"55","line":114,"column":9,"nodeType":"53","messageId":"54","endLine":114,"endColumn":17},{"ruleId":"51","severity":1,"message":"56","line":10,"column":10,"nodeType":"53","messageId":"54","endLine":10,"endColumn":22},{"ruleId":"57","severity":1,"message":"58","line":168,"column":41,"nodeType":"59","messageId":"60","endLine":168,"endColumn":43},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'getModal' is assigned a value but never used.","'confirmAlert' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]