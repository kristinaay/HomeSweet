[{"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\reportWebVitals.js":"1","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\App.js":"2","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\index.js":"3","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Home\\home.js":"4","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\SignUp\\signup.js":"5","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\SignIn\\signin.js":"6","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Appts\\appts.js":"7","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Housing\\housing.js":"8","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Account\\account.js":"9","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\navigation.js":"10","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Saved\\saved.js":"11"},{"size":362,"mtime":1606939464318,"results":"12","hashOfConfig":"13"},{"size":946,"mtime":1607814934059,"results":"14","hashOfConfig":"13"},{"size":500,"mtime":1606939464318,"results":"15","hashOfConfig":"13"},{"size":1534,"mtime":1607823453730,"results":"16","hashOfConfig":"13"},{"size":3038,"mtime":1607745356165,"results":"17","hashOfConfig":"13"},{"size":2625,"mtime":1607745515523,"results":"18","hashOfConfig":"13"},{"size":8561,"mtime":1607824296273,"results":"19","hashOfConfig":"13"},{"size":17085,"mtime":1607823393800,"results":"20","hashOfConfig":"13"},{"size":4493,"mtime":1607741936720,"results":"21","hashOfConfig":"13"},{"size":3921,"mtime":1607814384791,"results":"22","hashOfConfig":"13"},{"size":11842,"mtime":1607823897804,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1f5cb3i",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\reportWebVitals.js",[],["51","52"],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\App.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\index.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Home\\home.js",["53","54"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./home.css\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Navigation from \"../components/navigation.js\";\r\n\r\nfunction Home() {\r\n  let textInput = React.createRef();\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => {\r\n    const newSearch = textInput.current.value;\r\n\r\n    history.push({\r\n      pathname: \"/housing\",\r\n      state: { textInput: newSearch },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navigation></Navigation>\r\n      <section id=\"section1\" role=\"main\">\r\n        <h1 className=\"discover\">Rediscover Home</h1>\r\n        <div className=\"subtitle\">Find your perfect San Francisco housing.</div>\r\n        <div className=\"search-container\">\r\n          <div className=\"search\">\r\n            <input\r\n              aria-label=\"searchBox\"\r\n              type=\"text\"\r\n              className=\"searchTerm\"\r\n              ref={textInput}\r\n              placeholder=\"Search by neighborhood...\"\r\n            />\r\n\r\n            <button\r\n              aria-label=\"searchButton\"\r\n              type=\"submit\"\r\n              className=\"searchButton\"\r\n              onClick={handleClick}\r\n            >\r\n              <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n              <p className=\"searchForSR\">Search </p>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <footer>Image by @bradencollum on Unsplash.</footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\SignUp\\signup.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\SignIn\\signin.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Appts\\appts.js",["55"],"import React from \"react\";\r\nimport \"./appts.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport Navigation from \"../components/navigation.js\";\r\n\r\nfunction Appts() {\r\n  const [events, setEvents] = useState([]);\r\n  const [user, setUser] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"username\");\r\n    if (storedUser) {\r\n      setUser(storedUser);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getEventData = async () => {\r\n      try {\r\n        const _events = await fetch(\"/getevents\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            username: user,\r\n          }),\r\n        }).then((res) => res.json());\r\n\r\n        let events2 = _events;\r\n\r\n        setEvents(events2);\r\n        console.log(\"front\", events2);\r\n      } catch (err) {\r\n        console.log(\"error \", err);\r\n      }\r\n    };\r\n    getEventData();\r\n  }, [user]);\r\n\r\n  const getEvents = () => {\r\n    let rtn =\r\n      events !== null\r\n        ? events.eventsarr\r\n        : { title: \"demo\", start: \"2020-12-08 05:00\", end: \"2020-12-08 05:30\" };\r\n    return rtn;\r\n  };\r\n\r\n  return (\r\n    <div className=\"cal-cont\">\r\n      <Navigation></Navigation>\r\n      <div role=\"main\">\r\n        <h1 className=\"pg-heading\" id=\"appt-heading\">\r\n          Appointments\r\n        </h1>\r\n        <div className=\"create-appt\">\r\n          <h2 className=\"header-appt\"> Schedule a Viewing appointment: </h2>\r\n          <form action=\"/senddata2\" method=\"POST\" className=\"form-events\">\r\n            <div className=\"form-group-appt\">\r\n              <label htmlFor=\"username\">Username: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"appt-username\"\r\n                name=\"username\"\r\n                className=\"form-control\"\r\n                placeholder=\"Your username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group-appt\">\r\n              <label htmlFor=\"title\">Event Title: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"title\"\r\n                name=\"title\"\r\n                className=\"form-control\"\r\n                placeholder=\"Name your event\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group-appt\">\r\n              <label htmlFor=\"startdate\">Start Date and Time: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"startdate\"\r\n                name=\"startdate\"\r\n                className=\"form-control\"\r\n                placeholder=\"Use the format YYYY-MM-DD HH:MM\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group-appt\">\r\n              <label htmlFor=\"enddate\">End Date and Time: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"enddate\"\r\n                name=\"enddate\"\r\n                className=\"form-control\"\r\n                placeholder=\"Use the format YYYY-MM-DD HH:MM\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group-appt-2\">\r\n              <input\r\n                type=\"submit\"\r\n                value=\"Add Event\"\r\n                className=\"add-event-btn\"\r\n              />\r\n            </div>\r\n          </form>\r\n\r\n          <h2 className=\"header-appt\"> Delete a Viewing appointment: </h2>\r\n          <form action=\"/deletedata2\" method=\"POST\" className=\"form-events\">\r\n            <div className=\"form-group-appt\">\r\n              <label htmlFor=\"username\">Username: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"appt-username-2\"\r\n                name=\"username\"\r\n                className=\"form-control\"\r\n                placeholder=\"Your username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group-appt\">\r\n              <label htmlFor=\"title-2\">Event Title: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"title-2\"\r\n                name=\"title\"\r\n                className=\"form-control\"\r\n                placeholder=\"Event to be deleted\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group-appt\">\r\n              <label htmlFor=\"start\">Start Date and Time: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"startdate-2\"\r\n                name=\"start\"\r\n                className=\"form-control\"\r\n                placeholder=\"Use the format YYYY-MM-DD HH:MM\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group-appt\">\r\n              <label htmlFor=\"end\">End Date and Time: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"enddate-2\"\r\n                name=\"end\"\r\n                className=\"form-control\"\r\n                placeholder=\"Use the format YYYY-MM-DD HH:MM\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group-appt-2\">\r\n              <input\r\n                type=\"submit\"\r\n                value=\"Delete Event\"\r\n                className=\"add-event-btn\"\r\n              />\r\n            </div>\r\n          </form>\r\n          <h2 className=\"header-appt\">\r\n            {\" \"}\r\n            Or Click & Drag on the Calendar Below to Create an Event <br />&\r\n            Click An Existing Event to Delete{\" \"}\r\n          </h2>\r\n          <br />\r\n        </div>\r\n        <div className=\"cal\" tabindex=\"0\">\r\n          <FullCalendar\r\n            plugins={[interactionPlugin, dayGridPlugin, timeGridPlugin]}\r\n            initialView=\"timeGridWeek\"\r\n            defaultDate={new Date()}\r\n            selectable={true}\r\n            displayEventTime={true}\r\n            events={getEvents()}\r\n            tabindex=\"0\"\r\n            eventColor=\"#42692d\"\r\n            eventClick={async (clickInfo) => {\r\n              let bool = window.confirm(\r\n                \"Are you sure you want to delete this event?\"\r\n              );\r\n              if (bool) {\r\n                await fetch(\"/deletedata\", {\r\n                  method: \"POST\",\r\n                  headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\",\r\n                  },\r\n                  body: JSON.stringify({\r\n                    username: user,\r\n                    title: clickInfo.event.title,\r\n                    start: clickInfo.event.startStr,\r\n                    end: clickInfo.event.endStr,\r\n                    allDay: clickInfo.event.allDay,\r\n                  }),\r\n                });\r\n                clickInfo.event.remove();\r\n              }\r\n            }}\r\n            select={async (selectInfo) => {\r\n              let title = prompt(\"Please enter a new title for your event\");\r\n\r\n              let calendar = selectInfo.view.calendar;\r\n\r\n              if (title !== null && title != \"\") {\r\n                calendar.addEvent({\r\n                  title: title,\r\n                  start: selectInfo.startStr,\r\n                  end: selectInfo.endStr,\r\n                  allDay: selectInfo.allDay,\r\n                });\r\n                try {\r\n                  await fetch(\"/senddata\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                      Accept: \"application/json\",\r\n                      \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                      username: user,\r\n                      title: title,\r\n                      start: selectInfo.startStr,\r\n                      end: selectInfo.endStr,\r\n                      allDay: selectInfo.allDay,\r\n                    }),\r\n                  });\r\n                  console.log(\"done\");\r\n                } catch (err) {\r\n                  console.log(\"error\");\r\n                }\r\n              }\r\n            }}\r\n            defaultView=\"timeGridWeek\"\r\n            header={{\r\n              left: \"prev,next today\",\r\n              center: \"title\",\r\n              right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\",\r\n            }}\r\n            eventTimeFormat={{\r\n              hour: \"2-digit\",\r\n              minute: \"2-digit\",\r\n              meridiem: false,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Appts;\r\n","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Housing\\housing.js",["56"],"import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport \"./housing.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { ButtonGroup, DropdownButton } from \"react-bootstrap\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Navigation from \"../components/navigation.js\";\r\n\r\nfunction Housing(props) {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(12);\r\n  const [hovered, setHovered] = useState([]);\r\n  const [posts, setPosts] = useState([]);\r\n  const [origPosts, setOrigPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [p, setP] = useState([null, [null]]);\r\n  const [imgHovered, setImgHovered] = useState([]);\r\n  const [imgString, setImgString] = useState([]);\r\n  const [heartSaved, setHeartSaved] = useState([]);\r\n  const [indexPost, setIndex] = useState(0);\r\n  const location = useLocation();\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [username, setUser] = useState(\"\");\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const user = urlParams.get(\"username\");\r\n  if (user !== null && user !== undefined && user !== \"\") {\r\n    localStorage.setItem(\"username\", user);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"username\");\r\n    if (storedUser) {\r\n      setUser(storedUser);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getLoggedIn = async () => {\r\n      try {\r\n        const _loggedin = await fetch(\"/getlog\", {\r\n          method: \"GET\",\r\n          credentials: \"include\",\r\n        }).then((res) => res.json());\r\n        setLoggedIn(_loggedin);\r\n        console.log(\"logged in: \", _loggedin);\r\n      } catch (err) {\r\n        console.log(\"error\");\r\n      }\r\n    };\r\n    getLoggedIn();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const saveHeartsinDB = async () => {\r\n      try {\r\n        const _loggedin = await fetch(\"/getlog\", {\r\n          method: \"GET\",\r\n          credentials: \"include\",\r\n        }).then((res) => res.json());\r\n        setLoggedIn(_loggedin);\r\n        console.log(\"logged in: \", _loggedin);\r\n      } catch (err) {\r\n        console.log(\"error\");\r\n      }\r\n    };\r\n    saveHeartsinDB();\r\n  }, [heartSaved]);\r\n\r\n  useEffect(() => {\r\n    const dbSavedHearts = async () => {\r\n      const saved = await fetch(\"/getsavedhearts\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          username: username,\r\n        }),\r\n      });\r\n      const arr = [];\r\n      for (let i = 0; i < 3010; i++) {\r\n        arr.push(false);\r\n      }\r\n      const newArr = saved ? saved.heartsarr : arr;\r\n      setHeartSaved(newArr);\r\n    };\r\n    dbSavedHearts();\r\n  }, [username]);\r\n\r\n  useEffect(() => {\r\n    const fillImgString = () => {\r\n      try {\r\n        const arr = [];\r\n        for (let i = 0; i < 3010; i++) {\r\n          arr.push(\"./images/heart.png\");\r\n        }\r\n        setImgHovered(arr);\r\n      } catch (err) {\r\n        console.log(\"error\", err);\r\n      }\r\n    };\r\n    fillImgString();\r\n  }, []);\r\n  useEffect(() => {\r\n    const fillImgHovered = () => {\r\n      try {\r\n        const arr = [];\r\n        for (let i = 0; i < 3010; i++) {\r\n          arr.push(false);\r\n        }\r\n        setImgHovered(arr);\r\n      } catch (err) {\r\n        console.log(\"error\", err);\r\n      }\r\n    };\r\n    fillImgHovered();\r\n  }, []);\r\n\r\n  const handleClick = () => {\r\n    const newSearch = textInput.current.value;\r\n    setLoading(true);\r\n    setPosts(\r\n      origPosts.filter(\r\n        (p) => p[\"result-hood\"] && p[\"result-hood\"].includes(newSearch)\r\n      )\r\n    );\r\n    setLoading(false);\r\n  };\r\n  let textInput = React.createRef();\r\n  let textInputProps =\r\n    location.state === undefined ? \"\" : location.state.textInput;\r\n\r\n  useEffect(() => {\r\n    const getPosts = async () => {\r\n      try {\r\n        if (textInputProps !== null && textInputProps !== \"\") {\r\n          setLoading(true);\r\n          const _posts = await fetch(\"/getposts\").then((res) => res.json());\r\n          setOrigPosts(_posts);\r\n          setLoading(false);\r\n        } else {\r\n          setLoading(true);\r\n          const _posts = await fetch(\"/getposts\").then((res) => res.json());\r\n          setPosts(_posts);\r\n          setOrigPosts(_posts);\r\n          setLoading(false);\r\n        }\r\n      } catch (err) {\r\n        console.log(\"error\");\r\n      }\r\n    };\r\n    getPosts();\r\n  }, [textInputProps]);\r\n\r\n  useEffect(() => {\r\n    const getImgString = async () => {\r\n      let copyArr = [...heartSaved];\r\n      let value;\r\n      if (heartSaved[indexPost] && imgHovered[indexPost]) {\r\n        value = \"./images/heart-fill.png\";\r\n      } else if (!heartSaved[indexPost] && imgHovered[indexPost]) {\r\n        value = \"./images/heart-hover.png\";\r\n      } else if (heartSaved[indexPost] && !imgHovered[indexPost]) {\r\n        value = \"./images/heart-fill.png\";\r\n      } else if (!heartSaved[indexPost] && !imgHovered[indexPost]) {\r\n        value = \"./images/heart.png\";\r\n      }\r\n      copyArr[indexPost] = value;\r\n      setImgString(copyArr);\r\n    };\r\n    getImgString();\r\n  }, [heartSaved, imgHovered, indexPost]);\r\n\r\n  useEffect(() => {\r\n    setPosts(\r\n      origPosts.filter(\r\n        (p) => p[\"result-hood\"] && p[\"result-hood\"].includes(textInputProps)\r\n      )\r\n    );\r\n  }, [textInputProps, origPosts]);\r\n\r\n  useEffect(() => {\r\n    const getHovered = () => {\r\n      try {\r\n        const arr = [];\r\n        for (let i = 0; i < 3010; i++) {\r\n          arr.push(false);\r\n        }\r\n        setHovered(arr);\r\n      } catch (err) {\r\n        console.log(\"error\", err);\r\n      }\r\n    };\r\n    getHovered();\r\n  }, []);\r\n\r\n  const changeHovered = (index, value) => {\r\n    let copyArr = [...hovered];\r\n    copyArr[index] = value;\r\n    setHovered(copyArr);\r\n  };\r\n\r\n  const getHov = (index) => {\r\n    return hovered[index];\r\n  };\r\n\r\n  const getModal = () => {\r\n    return showModal;\r\n  };\r\n\r\n  const indexLastPost = currentPage * postsPerPage;\r\n  const indexFirstPost = indexLastPost - postsPerPage;\r\n  const currPosts = posts.slice(indexFirstPost, indexLastPost);\r\n\r\n  const clickedInfo = (p, index) => {\r\n    setIndex(index);\r\n    console.log(index);\r\n    setP(Object.values(p));\r\n    setShowModal(true);\r\n  };\r\n  const closeModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const renderImg = () => {\r\n    const items = [];\r\n    for (let i = 0; i < p[1].length; i++) {\r\n      items.push(\r\n        <div className=\"indiv-img col-xs-6\">\r\n          <img\r\n            src={\r\n              p[1]\r\n                ? `${`${p[1][i]}`.replace(\"50x50c\", \"600x450\")}`\r\n                : \"./images/notf.png\"\r\n            }\r\n            onError={(event) =>\r\n              event.target.setAttribute(\"src\", \"./images/notf.png\")\r\n            }\r\n            alt=\"housing\"\r\n            className=\"housing-img-2\"\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\" \"}\r\n        <div className=\"container-fluid\" id=\"cont\">\r\n          <div className=\"row\">{items}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const changeSavedHeart = (index, value) => {\r\n    let copyArr = [...heartSaved];\r\n    copyArr[index] = value;\r\n    setHeartSaved(copyArr);\r\n  };\r\n\r\n  const changeImgHovered = (value) => {\r\n    let copyArr = [...imgHovered];\r\n    copyArr[indexPost] = value;\r\n    setImgHovered(copyArr);\r\n  };\r\n  const savePost = async (\r\n    title,\r\n    price,\r\n    housinginfo,\r\n    hood,\r\n    date,\r\n    body,\r\n    address,\r\n    images\r\n  ) => {\r\n    let val = heartSaved[indexPost];\r\n    changeSavedHeart(indexPost, !val);\r\n    if (!heartSaved[indexPost]) {\r\n      try {\r\n        console.log(\"Add\", username);\r\n        await fetch(\"/savehousing\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            username: username,\r\n            title: title,\r\n            price: price,\r\n            housinginfo: housinginfo,\r\n            hood: hood,\r\n            date: date,\r\n            body: body,\r\n            address: address,\r\n            images: images,\r\n          }),\r\n        });\r\n      } catch (err) {\r\n        console.log(\"error\", err);\r\n      }\r\n    } else {\r\n      console.log(\"Delete\");\r\n      try {\r\n        await fetch(\"/deletehousing\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            username: username,\r\n            title: title,\r\n          }),\r\n        });\r\n      } catch (err) {\r\n        console.log(\"error\", err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderPosts = (posts, loading) => {\r\n    if (loading) {\r\n      return <h2>Loading...</h2>;\r\n    } else if (posts.length === 0) {\r\n      return <h2>No housing met your criteria.</h2>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal isOpen={showModal} aria-label=\"Modal\">\r\n          <div className=\"modal-header\">\r\n            <div className=\"buttons-post\">\r\n              {loggedIn && (\r\n                <button\r\n                  onMouseLeave={() => changeImgHovered(false)}\r\n                  onMouseOver={() => changeImgHovered(true)}\r\n                  onClick={() =>\r\n                    savePost(\r\n                      `${p[3]}`,\r\n                      `${p[4]}`,\r\n                      `${p[5]}`,\r\n                      `${p[6]}`,\r\n                      `${p[8]}`,\r\n                      `${p[9]}`,\r\n                      `${p[13]}`,\r\n                      `${p[1]}`\r\n                    )\r\n                  }\r\n                  className=\"heart\"\r\n                  aria-label=\"savePostButton\"\r\n                  tab-index=\"0\"\r\n                >\r\n                  <img\r\n                    src={imgString[indexPost]}\r\n                    alt=\"heart button to save a post\"\r\n                  />\r\n                </button>\r\n              )}\r\n              <button\r\n                onClick={closeModal}\r\n                aria-label=\"closeButton\"\r\n                className=\"close-btn\"\r\n                tab-index=\"0\"\r\n              >\r\n                X\r\n              </button>\r\n            </div>\r\n            <h2 className=\"modal-header-2\">{p[3]}</h2>\r\n          </div>\r\n\r\n          <div className=\"modal-body\">\r\n            <div className=\"modal-img\"></div>\r\n            <div>\r\n              <b>Price:</b> {p[4]}\r\n            </div>\r\n            <div>\r\n              <b>Neighborhood:</b> {p[6]}\r\n            </div>\r\n            <div>\r\n              <b>Map Address:</b> {p[13]}\r\n            </div>\r\n            <div>\r\n              <b>Date Posted:</b> {p[8]}\r\n            </div>\r\n            <div>\r\n              <b>Housing Information:</b> {p[5]}\r\n            </div>\r\n            <div>\r\n              <b>About:</b>\r\n              {`${p[9]}`\r\n                .replaceAll(\"&amp;\", \"and\")\r\n                .replace(/<[^>]*>?/gm, \"\")\r\n                .replace(\"QR Code Link to This Post\", \"\")}\r\n            </div>{\" \"}\r\n          </div>\r\n\r\n          <div className=\"modal-img\">{renderImg()}</div>\r\n        </Modal>\r\n\r\n        <Container>\r\n          <Row>\r\n            {posts.map((p, index) => (\r\n              <Col md=\"4\">\r\n                <div className=\"container-card\">\r\n                  {\" \"}\r\n                  <b>\r\n                    <div className=\"card-header-1\">{p[\"result-title\"]}</div>\r\n                  </b>\r\n                  {getHov(index) && (\r\n                    <div\r\n                      className=\"moreinfo\"\r\n                      onMouseLeave={() => changeHovered(index, false)}\r\n                      onMouseOver={() => changeHovered(index, true)}\r\n                      tabIndex=\"0\"\r\n                    >\r\n                      <Button\r\n                        className=\"click\"\r\n                        onClick={() => clickedInfo(p, index)}\r\n                      >\r\n                        Click for more info!{\" \"}\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                  {!getHov(index) && (\r\n                    <div className=\"whole-card\">\r\n                      <div\r\n                        className=\"card-body-1\"\r\n                        onMouseLeave={() => changeHovered(index, false)}\r\n                        onMouseOver={() => changeHovered(index, true)}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            p.images[0]\r\n                              ? `${p.images[0].replace(\"50x50c\", \"600x450\")}`\r\n                              : \"./images/notf.png\"\r\n                          }\r\n                          onError={(event) =>\r\n                            event.target.setAttribute(\r\n                              \"src\",\r\n                              \"./images/notf.png\"\r\n                            )\r\n                          }\r\n                          alt=\"housing\"\r\n                          className=\"housing-img\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const paginate = (pageNumber, totalPosts) => {\r\n    if (pageNumber === \"<<\") {\r\n      setCurrentPage(1);\r\n    } else if (pageNumber === \">>\") {\r\n      setCurrentPage(Math.ceil(totalPosts / 12));\r\n    } else {\r\n      setCurrentPage(pageNumber);\r\n    }\r\n  };\r\n\r\n  const Pagination = (postsPerPage, totalPosts, paginate, currentPage) => {\r\n    const pageNumbers = [];\r\n\r\n    const pages = Math.ceil(totalPosts / 12);\r\n    if (currentPage <= 5) {\r\n      currentPage = 5;\r\n    }\r\n\r\n    if (currentPage >= pages - 5) {\r\n      currentPage = pages - 5;\r\n    }\r\n    pageNumbers.push(\"<<\");\r\n\r\n    for (\r\n      let i = Math.max(1, currentPage - 5);\r\n      i <= Math.min(currentPage + 5, totalPosts);\r\n      i++\r\n    ) {\r\n      pageNumbers.push(i);\r\n    }\r\n    pageNumbers.push(\">>\");\r\n\r\n    return (\r\n      <nav className=\"pag\">\r\n        <ol className=\"pagination\">\r\n          {pageNumbers.map((i) => (\r\n            <li key={i} className=\"page-item\">\r\n              <Button\r\n                onClick={() => paginate(i, totalPosts)}\r\n                className=\"page-link\"\r\n              >\r\n                {i}\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </nav>\r\n    );\r\n  };\r\n\r\n  const filterLoToHi = () => {\r\n    const sorted = [...posts].sort(\r\n      (a, b) =>\r\n        a[\"result-price\"].replace(\"$\", \"\").replace(\",\", \"\") -\r\n        b[\"result-price\"].replace(\"$\", \"\").replace(\",\", \"\")\r\n    );\r\n\r\n    setPosts(sorted);\r\n  };\r\n\r\n  const filterHiToLo = () => {\r\n    const sorted = [...posts].sort(\r\n      (a, b) =>\r\n        b[\"result-price\"].replace(\"$\", \"\").replace(\",\", \"\") -\r\n        a[\"result-price\"].replace(\"$\", \"\").replace(\",\", \"\")\r\n    );\r\n\r\n    setPosts(sorted);\r\n  };\r\n\r\n  const filterOrig = () => {\r\n    setPosts(origPosts);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navigation></Navigation>\r\n\r\n      <div className=\"house-full\" role=\"main\">\r\n        <h1 className=\"pg-heading\">All Housing </h1>\r\n        <div className=\"inner\">\r\n          <div className=\"filters\">\r\n            <div className=\"search\" id=\"search-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"searchTerm\"\r\n                ref={textInput}\r\n                placeholder=\"Search by neighborhood...\"\r\n                aria-label=\"searchBox\"\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                className=\"searchButton\"\r\n                onClick={handleClick}\r\n              >\r\n                <i\r\n                  className=\"fa fa-search\"\r\n                  aria-hidden=\"true\"\r\n                  aria-label=\"searchButton\"\r\n                  title=\"search\"\r\n                ></i>\r\n                <p className=\"searchForSR\">Search </p>\r\n              </button>\r\n              <ButtonGroup className=\"dropdown\">\r\n                <DropdownButton title=\"Sort By:\" id=\"dropdown-btn\">\r\n                  <Button key=\"1\" className=\"filter-btn\" onClick={filterLoToHi}>\r\n                    Price (low to high)\r\n                  </Button>\r\n                  <Button key=\"2\" className=\"filter-btn\" onClick={filterHiToLo}>\r\n                    Price (high to low){\" \"}\r\n                  </Button>\r\n                  <Button key=\"3\" className=\"filter-btn\" onClick={filterOrig}>\r\n                    Default\r\n                  </Button>\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </div>\r\n          </div>\r\n          <div className=\"rendered\">{renderPosts(currPosts, loading)} </div>\r\n          {Pagination(postsPerPage, posts.length, paginate, currentPage)}\r\n        </div>\r\n      </div>\r\n\r\n      <footer className=\"other-footer\"></footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Housing;\r\n","C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Account\\account.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\components\\navigation.js",[],"C:\\Users\\krist\\Documents\\FinalProject\\front\\src\\Saved\\saved.js",["57","58"],"import React from \"react\";\r\nimport \"./saved.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Navigation from \"../components/navigation.js\";\r\nimport Modal from \"react-modal\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nfunction Saved() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [user, setUser] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [hovered, setHovered] = useState([]);\r\n  const [indexPost, setIndex] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(12);\r\n  const [change, setChanged] = useState(false);\r\n  const getModal = () => {\r\n    return showModal;\r\n  };\r\n  const [p, setP] = useState([null, [null]]);\r\n  const indexLastPost = currentPage * postsPerPage;\r\n  const indexFirstPost = indexLastPost - postsPerPage;\r\n  const [currPosts, setCurrPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"username\");\r\n    if (storedUser) {\r\n      setUser(storedUser);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getHovered = () => {\r\n      try {\r\n        const arr = [];\r\n        for (let i = 0; i < 3010; i++) {\r\n          arr.push(false);\r\n        }\r\n        setHovered(arr);\r\n      } catch (err) {\r\n        console.log(\"error\", err);\r\n      }\r\n    };\r\n    getHovered();\r\n  }, []);\r\n\r\n  const changeHovered = (index, value) => {\r\n    let copyArr = [...hovered];\r\n    copyArr[index] = value;\r\n    setHovered(copyArr);\r\n  };\r\n\r\n  const getHov = (index) => {\r\n    return hovered[index];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getSavedPosts = async () => {\r\n      setLoading(true);\r\n      const _posts = await fetch(\"/getsavedposts\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          username: user,\r\n        }),\r\n      }).then((res) => res.json());\r\n\r\n      let p = _posts ? _posts : null;\r\n      setPosts(p);\r\n      setLoading(false);\r\n    };\r\n    getSavedPosts();\r\n  }, [user, change]);\r\n\r\n  useEffect(() => {\r\n    const getCurrPosts = async () => {\r\n      let curr = [];\r\n      if (posts !== undefined && posts != null) {\r\n        curr = posts.slice(indexFirstPost, indexLastPost);\r\n      }\r\n      setCurrPosts(curr);\r\n    };\r\n    getCurrPosts();\r\n  }, [indexFirstPost, indexLastPost, posts]);\r\n\r\n  const paginate = (pageNumber, totalPosts) => {\r\n    if (pageNumber === \"<<\") {\r\n      setCurrentPage(1);\r\n    } else if (pageNumber === \">>\") {\r\n      setCurrentPage(Math.ceil(totalPosts / 12));\r\n    } else {\r\n      setCurrentPage(pageNumber);\r\n    }\r\n  };\r\n\r\n  const Pagination = (postsPerPage, totalPosts, paginate, currentPage) => {\r\n    const pageNumbers = [];\r\n\r\n    const pages = Math.ceil(totalPosts / 12);\r\n    if (currentPage <= 5) {\r\n      currentPage = 5;\r\n    }\r\n\r\n    if (currentPage >= pages - 5) {\r\n      currentPage = pages - 5;\r\n    }\r\n    pageNumbers.push(\"<<\");\r\n\r\n    for (\r\n      let i = Math.max(1, currentPage - 5);\r\n      i <= Math.min(currentPage + 5, totalPosts);\r\n      i++\r\n    ) {\r\n      pageNumbers.push(i);\r\n    }\r\n    pageNumbers.push(\">>\");\r\n\r\n    return (\r\n      <nav className=\"pag\">\r\n        <ol className=\"pagination\">\r\n          {pageNumbers.map((i) => (\r\n            <li key={i} className=\"page-item\">\r\n              <Button\r\n                onClick={() => paginate(i, totalPosts)}\r\n                className=\"page-link\"\r\n              >\r\n                {i}\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </nav>\r\n    );\r\n  };\r\n\r\n  const clickedInfo = (p, index) => {\r\n    setIndex(index);\r\n    console.log(index);\r\n    setP(Object.values(p));\r\n    setShowModal(true);\r\n  };\r\n  const closeModal = () => {\r\n    setShowModal(false);\r\n  };\r\n  const renderImg = () => {\r\n    const items = [];\r\n    if (p[7] !== undefined) {\r\n      let arr = p[7].split(\",\");\r\n      for (let i = 0; i < arr.length; i++) {\r\n        items.push(\r\n          <div className=\"indiv-img col-xs-6\">\r\n            <img\r\n              src={\r\n                arr\r\n                  ? `${`${arr[i]}`.replace(\"50x50c\", \"600x450\")}`\r\n                  : \"./images/notf.png\"\r\n              }\r\n              onError={(event) =>\r\n                event.target.setAttribute(\"src\", \"./images/notf.png\")\r\n              }\r\n              alt=\"housing\"\r\n              className=\"housing-img-2\"\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          {\" \"}\r\n          <div className=\"container-fluid\" id=\"cont\">\r\n            <div className=\"row\">{items}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const deletePost = async (username, title) => {\r\n    let bool = window.confirm(\r\n      \"Are you sure you want to remove this post from favorites?\"\r\n    );\r\n    if (bool) {\r\n      await fetch(\"/deletehousing\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          username: username,\r\n          title: title,\r\n        }),\r\n      });\r\n      setChanged(!change);\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  const updatePost = async (\r\n    username,\r\n    title,\r\n    price,\r\n    housinginfo,\r\n    hood,\r\n    date,\r\n    body,\r\n    address,\r\n    images\r\n  ) => {\r\n    let notes = window.prompt(\"Add Notes to this Post: \");\r\n    await fetch(\"/updatehousing\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        title: title,\r\n        price: price,\r\n        housinginfo: housinginfo,\r\n        hood: hood,\r\n        date: date,\r\n        body: body,\r\n        address: address,\r\n        images: images,\r\n        notes: notes,\r\n      }),\r\n    });\r\n\r\n    closeModal();\r\n    await setChanged(!change);\r\n  };\r\n\r\n  const renderSavedPosts = (posts, loading) => {\r\n    if (loading) {\r\n      return <h2>Loading...</h2>;\r\n    } else if (`${posts}` === null || `${posts}` === \"\") {\r\n      return (\r\n        <h2>\r\n          No posts saved yet! Browse \"All Housing\" to find your favorites.\r\n        </h2>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Modal isOpen={showModal}>\r\n            <div className=\"modal-header\">\r\n              <div className=\"buttons-post\">\r\n                <button className=\"heart\" tab-index=\"0\">\r\n                  <img\r\n                    onClick={() => {\r\n                      updatePost(\r\n                        user,\r\n                        p[0],\r\n                        p[1],\r\n                        p[2],\r\n                        p[3],\r\n                        p[4],\r\n                        p[5],\r\n                        p[6],\r\n                        p[7]\r\n                      );\r\n                    }}\r\n                    src={\"./images/edit.png\"}\r\n                    alt=\"pen button to edit the post\"\r\n                  />\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    deletePost(user, p[0]);\r\n                  }}\r\n                  className=\"heart\"\r\n                  tab-index=\"0\"\r\n                >\r\n                  <img\r\n                    src={\"./images/delete.png\"}\r\n                    alt=\"trash button to delete the post\"\r\n                  />\r\n                </button>\r\n                <button\r\n                  onClick={closeModal}\r\n                  className=\"close-btn\"\r\n                  tab-index=\"0\"\r\n                >\r\n                  X\r\n                </button>\r\n              </div>\r\n              <h2 className=\"modal-header-2\">{p[0]}</h2>\r\n            </div>\r\n\r\n            <div className=\"modal-body\">\r\n              <div className=\"modal-img\"></div>\r\n              <div>\r\n                <b>Your Notes: </b>\r\n                {p[8]\r\n                  ? p[8]\r\n                  : \" None yet. Click the pen icon in the top right corner to annotate this post!\"}\r\n              </div>{\" \"}\r\n              <br />\r\n              <div>\r\n                <b>Price:</b> {p[1]}\r\n              </div>\r\n              <div>\r\n                <b>Neighborhood:</b> {p[3]}\r\n              </div>\r\n              <div>\r\n                <b>Map Address:</b> {p[6]}\r\n              </div>\r\n              <div>\r\n                <b>Date Posted:</b> {p[4]}\r\n              </div>\r\n              <div>\r\n                <b>Housing Information:</b> {p[2]}\r\n              </div>\r\n              <div>\r\n                <b>About:</b>\r\n                {`${p[5]}`\r\n                  .replaceAll(\"&amp;\", \"and\")\r\n                  .replace(/<[^>]*>?/gm, \"\")\r\n                  .replace(\"QR Code Link to This Post\", \"\")}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"modal-img\">{renderImg()}</div>\r\n          </Modal>\r\n\r\n          <Container>\r\n            <Row>\r\n              {posts.map((p, index) => (\r\n                <Col md=\"4\">\r\n                  <div className=\"container-card\">\r\n                    {\" \"}\r\n                    <b>\r\n                      <div className=\"card-header-1\">{p.title}</div>\r\n                    </b>\r\n                    {getHov(index) && (\r\n                      <div\r\n                        className=\"moreinfo\"\r\n                        onMouseLeave={() => changeHovered(index, false)}\r\n                        onMouseOver={() => changeHovered(index, true)}\r\n                        tabIndex=\"0\"\r\n                      >\r\n                        <Button\r\n                          className=\"click\"\r\n                          onClick={() => clickedInfo(p, index)}\r\n                        >\r\n                          Click for more info!{\" \"}\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n                    {!getHov(index) && (\r\n                      <div className=\"whole-card\">\r\n                        <div\r\n                          className=\"card-body-1\"\r\n                          onMouseLeave={() => changeHovered(index, false)}\r\n                          onMouseOver={() => changeHovered(index, true)}\r\n                        >\r\n                          <img\r\n                            src={\r\n                              p.images.split(\",\")[0]\r\n                                ? `${p.images\r\n                                    .split(\",\")[0]\r\n                                    .replace(\"50x50c\", \"600x450\")}`\r\n                                : \"./images/notf.png\"\r\n                            }\r\n                            onError={(event) =>\r\n                              event.target.setAttribute(\r\n                                \"src\",\r\n                                \"./images/notf.png\"\r\n                              )\r\n                            }\r\n                            alt=\"housing\"\r\n                            className=\"housing-img\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navigation></Navigation>\r\n\r\n      <section className=\"house-full\" id=\"saved\" role=\"main\">\r\n        <h1 className=\"pg-heading\">Saved Posts </h1>\r\n        <div className=\"rendered\">{renderSavedPosts(currPosts, loading)} </div>\r\n\r\n        {Pagination(\r\n          postsPerPage,\r\n          posts ? posts.length : 0,\r\n          paginate,\r\n          currentPage\r\n        )}\r\n      </section>\r\n      <footer className=\"other-footer\"></footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Saved;\r\n",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":2,"column":10,"nodeType":"65","messageId":"66","endLine":2,"endColumn":14},{"ruleId":"63","severity":1,"message":"67","line":4,"column":10,"nodeType":"65","messageId":"66","endLine":4,"endColumn":18},{"ruleId":"68","severity":1,"message":"69","line":210,"column":43,"nodeType":"70","messageId":"71","endLine":210,"endColumn":45},{"ruleId":"63","severity":1,"message":"72","line":211,"column":9,"nodeType":"65","messageId":"66","endLine":211,"endColumn":17},{"ruleId":"63","severity":1,"message":"73","line":15,"column":10,"nodeType":"65","messageId":"66","endLine":15,"endColumn":19},{"ruleId":"63","severity":1,"message":"72","line":19,"column":9,"nodeType":"65","messageId":"66","endLine":19,"endColumn":17},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'getModal' is assigned a value but never used.","'indexPost' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]